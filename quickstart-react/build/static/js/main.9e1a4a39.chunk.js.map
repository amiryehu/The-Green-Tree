{"version":3,"sources":["components/GreenItems/GreenItem-styles.ts","halpers/queries.ts","halpers/index.ts","halpers/functions.ts","components/GreenItems/GreenItems.tsx","App.tsx","serviceWorker.js","index.js"],"names":["DataContainer","styled","div","Row","SuccessMessage","queries","monday","mondaySdk","fetchData","get","getItemsFromBoard","data","console","log","user","id","api","variables","boardIds","then","res","boards","items","itemsInBoard","countAllItemsAndMyItems","userId","counterAllItems","counterMyItems","countUpdates","forEach","item","numOfWords","name","split","length","updates","update","text_body","creator","myPart","Math","ceil","paperISave","GreenItems","useState","allNumbers","setAllNumbers","useContext","AppContext","setAllItems","allItems","arrangeAllBoardsIds","map","prevItems","parseInt","useEffect","createContext","App","value","Provider","style","display","alignItems","justifyContent","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e1a4a39.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const DataContainer = styled.div`\n  width: 450px;\n  height: 400px;\n  padding-left: 55px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  background-color: #26a871;\n  border: 1px solid gray;\n  border-radius: 16px;\n  box-shadow: 5px 10px 18px #888888;\n  color: white;\n`;\n\nexport const Row = styled.div`\n  font-size: 20px;\n  font-weight: 400;\n`;\nexport const SuccessMessage = styled.div`\n  font-size: 25px;\n  font-weight: 400;\n`;\n\nexport const BoltNumber = styled.div`\n  font-size: 35px;\n`;\n","export const queries = {\n  getBoardIds: `query {\n        boards {\n            id\n        }\n    }`,\n  getAllItemsFromBoardById: `query ($boardIds: [Int]!){\n      boards (ids:$boardIds) {\n        name\n        items {\n          name\n          updates {\n            text_body\n          }\n          creator {\n            id\n          } \n        }\n      }\n    }`,\n  getAllItemsInCurrentBoard: `query {\n      items {\n        name\n        updates {\n          text_body\n        }\n        creator {\n          id\n        } \n      }\n  }`,\n};\n","import mondaySdk from \"monday-sdk-js\";\nimport { queries } from \"./queries\";\n\nconst monday = mondaySdk();\n\n//Context\nexport const fetchData = () => {\n  return monday.get(\"context\");\n};\n\nexport const getAllItemsInCurrentBoard = async () => {\n  const itemsInBoard = await monday.api(queries.getAllItemsInCurrentBoard);\n\n  return itemsInBoard;\n};\n\nexport const getItemsFromBoard = async () => {\n  const { data } = await fetchData();\n  console.log(data);\n  console.log(data.user.id);\n\n  const itemsInBoard = await monday\n    .api(queries.getAllItemsFromBoardById, {\n      variables: { boardIds: data.boardIds[0] },\n    })\n    .then((res: any) => {\n      return res?.data?.boards[0]?.items;\n    });\n  return itemsInBoard;\n};\n\n// export const getAllItemsFromAllBoard = async (boardId: number[]) => {\n//   let allItems: object[] = [];\n\n//   boardId.forEach(async (id) => {\n//     const data = await monday.api(queries.getAllItemsFromBoardById, {\n//       variables: { boardIds: [id] },\n//     });\n//     allItems.push(data.data);\n//   });\n\n//   return allItems;\n// };\n","import { Item } from \"./consts\";\n\nexport const countAllItemsAndMyItems = (items: Item[], userId: number) => {\n  let counterAllItems = 0;\n  let counterMyItems = 0;\n  let countUpdates = 0;\n\n  items.forEach((item) => {\n    const numOfWords = item.name.split(\" \").length;\n\n    item.updates.forEach((update) => {\n      countUpdates += update.text_body.split(\" \").length;\n    });\n\n    counterAllItems = counterAllItems + numOfWords + countUpdates;\n\n    if (item.creator.id === userId) {\n      counterMyItems = counterMyItems + numOfWords + countUpdates;\n    }\n    countUpdates = 0;\n  });\n\n  const myPart = Math.ceil((counterMyItems / counterAllItems) * 100);\n  const paperISave = Math.ceil(counterMyItems / 250);\n\n  return {\n    counterAllItems: counterAllItems,\n    counterMyItems: counterMyItems,\n    myPart: myPart,\n    paperISave: paperISave,\n  };\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../../App\";\nimport { DataContainer, SuccessMessage, Row } from \"./GreenItem-styles\";\n\nimport { fetchData, getItemsFromBoard } from \"../../halpers\";\nimport { Item, Numbers } from \"../../halpers/consts\";\nimport { countAllItemsAndMyItems } from \"../../halpers/functions\";\n\nconst GreenItems = () => {\n  const [allNumbers, setAllNumbers] = useState<Numbers>();\n  const { allItems, setAllItems }: any = useContext(AppContext);\n\n  const arrangeAllBoardsIds = async () => {\n    const { data } = await fetchData();\n\n    const items: Item[] = await getItemsFromBoard();\n    console.log(items);\n    items.map((item: Item) => {\n      setAllItems((prevItems: Item[]) => [...prevItems, item]);\n    });\n    const allNumbers = countAllItemsAndMyItems(items, parseInt(data.user.id));\n    setAllNumbers(allNumbers);\n    console.log(allNumbers);\n\n    return items;\n  };\n\n  useEffect(() => {\n    //arramge all data\n    arrangeAllBoardsIds();\n  }, []);\n\n  return (\n    <DataContainer>\n      <SuccessMessage>Hi Jordi! </SuccessMessage>\n      <Row>\n        Amount of words written in your teams board:{\" \"}\n        {allNumbers?.counterAllItems}\n      </Row>\n      <Row>\n        Amount of words <strong>you</strong> wrote in the board:{\" \"}\n        {allNumbers?.counterMyItems}\n      </Row>\n      <Row>My part in the team: {allNumbers?.myPart}%</Row>\n      <div>\n        <SuccessMessage>Good job!</SuccessMessage>\n        <SuccessMessage>\n          You managed to save <strong>{allNumbers?.paperISave}</strong> papers!\n        </SuccessMessage>\n      </div>\n    </DataContainer>\n  );\n};\n\nexport default GreenItems;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"monday-ui-react-core/dist/main.css\";\n// Explore more Monday React Components here: https://style.monday.com/\nimport GreenItems from \"./components/GreenItems/GreenItems\";\nimport { createContext } from \"react\";\nimport { Item } from \"./halpers/consts\";\n\nexport const AppContext = createContext({});\nconst App = () => {\n  const [allItems, setAllItems] = useState<Item[]>([]);\n\n  const value = {\n    allItems,\n    setAllItems,\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"500px\",\n        }}\n      >\n        <GreenItems />\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}